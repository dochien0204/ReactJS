{"ast":null,"code":"var _jsxFileName = \"/home/dochien0204/Documents/ReactJS/project-login/src/store/auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  logOut: () => {},\n  onLogIn: (email, password) => {}\n});\nconst AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, [isLoggedIn]);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    setIsLoggedIn(true);\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n  };\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n    localStorage.setItem(\"isLoggedIn\", \"0\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {},\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","logOut","onLogIn","email","password","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","setItem","logoutHandler","children"],"sources":["/home/dochien0204/Documents/ReactJS/project-login/src/store/auth-context.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst AuthContext = React.createContext({\n  isLoggedIn: false,\n  logOut: () => {},\n  onLogIn: (email, password) => {}\n});\n\nconst AuthContextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, [isLoggedIn]);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    setIsLoggedIn(true);\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n  };\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n    localStorage.setItem(\"isLoggedIn\", \"0\");\n  };\n  return <AuthContext.Provider value={{}}>{props.children}</AuthContext.Provider>;\n};\nexport default AuthContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAEnD,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAC;EACtCC,UAAU,EAAE,KAAK;EACjBC,MAAM,EAAE,MAAM,CAAC,CAAC;EAChBC,OAAO,EAAE,CAACC,KAAK,EAAEC,QAAQ,KAAK,CAAC;AACjC,CAAC,CAAC;AAEF,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAA;EACrC,MAAM,CAACN,UAAU,EAAEO,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMW,6BAA6B,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACxE,IAAIF,6BAA6B,KAAK,GAAG,EAAE;MACzCD,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC;EAEhB,MAAMW,YAAY,GAAG,CAACR,KAAK,EAAEC,QAAQ,KAAK;IACxC;IACA;IACAG,aAAa,CAAC,IAAI,CAAC;IACnBE,YAAY,CAACG,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;EACzC,CAAC;EAED,MAAMC,aAAa,GAAG,MAAM;IAC1BN,aAAa,CAAC,KAAK,CAAC;IACpBE,YAAY,CAACG,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;EACzC,CAAC;EACD,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE,CAAC,CAAE;IAAA,UAAEN,KAAK,CAACQ;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AACjF,CAAC;AAAC,GAtBIT,mBAAmB;AAAA,KAAnBA,mBAAmB;AAuBzB,eAAeP,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}