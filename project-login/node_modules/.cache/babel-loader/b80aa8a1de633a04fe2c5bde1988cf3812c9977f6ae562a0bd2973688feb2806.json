{"ast":null,"code":"var _jsxFileName = \"/home/dochien0204/Documents/ReactJS/project-login/src/store/auth-context.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogOut: logoutHandler,\n  onLogIn: loginHandler\n});\nconst [isLoggedIn, setIsLoggedIn] = useState(false);\nuseEffect(() => {\n  const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  if (storedUserLoggedInInformation === \"1\") {\n    setIsLoggedIn(true);\n  }\n}, [isLoggedIn]);\nconst loginHandler = (email, password) => {\n  // We should of course check email and password\n  // But it's just a dummy/ demo anyways\n  setIsLoggedIn(true);\n  localStorage.setItem(\"isLoggedIn\", \"1\");\n};\nconst logoutHandler = () => {\n  setIsLoggedIn(false);\n  localStorage.setItem(\"isLoggedIn\", \"0\");\n};\nconst AuthContextProvider = props => {\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n};\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogOut","logoutHandler","onLogIn","loginHandler","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","email","password","setItem","AuthContextProvider","props","children"],"sources":["/home/dochien0204/Documents/ReactJS/project-login/src/store/auth-context.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\n\nconst AuthContext = React.createContext({ isLoggedIn: false , onLogOut: logoutHandler, onLogIn: loginHandler});\n\nconst [isLoggedIn, setIsLoggedIn] = useState(false);\n\nuseEffect(() => {\n  const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  if (storedUserLoggedInInformation === \"1\") {\n    setIsLoggedIn(true);\n  }\n}, [isLoggedIn]);\n\nconst loginHandler = (email, password) => {\n  // We should of course check email and password\n  // But it's just a dummy/ demo anyways\n  setIsLoggedIn(true);\n  localStorage.setItem(\"isLoggedIn\", \"1\");\n};\n\nconst logoutHandler = () => {\n  setIsLoggedIn(false);\n  localStorage.setItem(\"isLoggedIn\", \"0\");\n};\n\nconst AuthContextProvider = (props) => {\n  return <AuthContext.Provider>{props.children}</AuthContext.Provider>;\n};\nexport default AuthContext;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAC;AAEjD,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAC;EAAEC,UAAU,EAAE,KAAK;EAAGC,QAAQ,EAAEC,aAAa;EAAEC,OAAO,EAAEC;AAAY,CAAC,CAAC;AAE9G,MAAM,CAACJ,UAAU,EAAEK,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;AAEnDC,SAAS,CAAC,MAAM;EACd,MAAMS,6BAA6B,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EACxE,IAAIF,6BAA6B,KAAK,GAAG,EAAE;IACzCD,aAAa,CAAC,IAAI,CAAC;EACrB;AACF,CAAC,EAAE,CAACL,UAAU,CAAC,CAAC;AAEhB,MAAMI,YAAY,GAAG,CAACK,KAAK,EAAEC,QAAQ,KAAK;EACxC;EACA;EACAL,aAAa,CAAC,IAAI,CAAC;EACnBE,YAAY,CAACI,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;AACzC,CAAC;AAED,MAAMT,aAAa,GAAG,MAAM;EAC1BG,aAAa,CAAC,KAAK,CAAC;EACpBE,YAAY,CAACI,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;AACzC,CAAC;AAED,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EACrC,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAA,UAAEA,KAAK,CAACC;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AACtE,CAAC;AAAC,KAFIF,mBAAmB;AAGzB,eAAed,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}