{"ast":null,"code":"var _jsxFileName = \"/home/dochien0204/Documents/ReactJS/redux-react/src/components/Auth.js\",\n  _s = $RefreshSig$();\nimport classes from './Auth.module.css';\nimport { useDispatch } from 'react-redux';\nimport { authActions } from '../store';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Auth = () => {\n  _s();\n  let regexEmail = /([a-zA-Z0-9]+)([\\.{1}])?([a-zA-Z0-9]+)\\@gmail([\\.])com/g;\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasErrors: emailHasErrors\n  } = useInput(value => value.trim() !== '' && regexEmail.test(enteredEmail));\n  const dispatch = useDispatch();\n  const loginHandler = event => {\n    dispatch(authActions.login);\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.auth,\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Email is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loginHandler,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(Auth, \"Ur14uSskAK43k/fmcDaXtrOGpvQ=\", false, function () {\n  return [useInput, useDispatch];\n});\n_c = Auth;\nexport default Auth;\nvar _c;\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"names":["classes","useDispatch","authActions","useInput","Auth","regexEmail","value","enteredEmail","isValid","enteredEmailIsValid","hasErrors","emailHasErrors","trim","test","dispatch","loginHandler","event","login","auth","control"],"sources":["/home/dochien0204/Documents/ReactJS/redux-react/src/components/Auth.js"],"sourcesContent":["import classes from './Auth.module.css';\nimport { useDispatch } from 'react-redux';\nimport { authActions } from '../store';\nimport useInput from '../hooks/use-input';\n\nconst Auth = () => {\n\n  let regexEmail = /([a-zA-Z0-9]+)([\\.{1}])?([a-zA-Z0-9]+)\\@gmail([\\.])com/g;\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasErrors: emailHasErrors,\n\n  } = useInput(value => value.trim() !== '' && regexEmail.test(enteredEmail));\n\n  const dispatch = useDispatch();\n  const loginHandler = event => {\n    dispatch(authActions.login);\n  };\n\n  return (\n    <main className={classes.auth}>\n      <section>\n        <form>\n          <div className={classes.control}>\n            <label htmlFor='email'>Email</label>\n            <input type='email' id='email' />\n          <p>Email is required</p>\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='password'>Password</label>\n            <input type='password' id='password' />\n          </div>\n          <button onClick={loginHandler}>Login</button>\n        </form>\n      </section>\n    </main>\n  );\n};\n\nexport default Auth;\n"],"mappings":";;AAAA,OAAOA,OAAO,MAAM,mBAAmB;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,UAAU;AACtC,OAAOC,QAAQ,MAAM,oBAAoB;AAAC;AAE1C,MAAMC,IAAI,GAAG,MAAM;EAAA;EAEjB,IAAIC,UAAU,GAAG,yDAAyD;EAC1E,MAAM;IACJC,KAAK,EAAEC,YAAY;IACnBC,OAAO,EAAEC,mBAAmB;IAC5BC,SAAS,EAAEC;EAEb,CAAC,GAAGR,QAAQ,CAACG,KAAK,IAAIA,KAAK,CAACM,IAAI,EAAE,KAAK,EAAE,IAAIP,UAAU,CAACQ,IAAI,CAACN,YAAY,CAAC,CAAC;EAE3E,MAAMO,QAAQ,GAAGb,WAAW,EAAE;EAC9B,MAAMc,YAAY,GAAGC,KAAK,IAAI;IAC5BF,QAAQ,CAACZ,WAAW,CAACe,KAAK,CAAC;EAC7B,CAAC;EAED,oBACE;IAAM,SAAS,EAAEjB,OAAO,CAACkB,IAAK;IAAA,uBAC5B;MAAA,uBACE;QAAA,wBACE;UAAK,SAAS,EAAElB,OAAO,CAACmB,OAAQ;UAAA,wBAC9B;YAAO,OAAO,EAAC,OAAO;YAAA,UAAC;UAAK;YAAA;YAAA;YAAA;UAAA,QAAQ,eACpC;YAAO,IAAI,EAAC,OAAO;YAAC,EAAE,EAAC;UAAO;YAAA;YAAA;YAAA;UAAA,QAAG,eACnC;YAAA,UAAG;UAAiB;YAAA;YAAA;YAAA;UAAA,QAAI;QAAA;UAAA;UAAA;UAAA;QAAA,QAClB,eACN;UAAK,SAAS,EAAEnB,OAAO,CAACmB,OAAQ;UAAA,wBAC9B;YAAO,OAAO,EAAC,UAAU;YAAA,UAAC;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAQ,eAC1C;YAAO,IAAI,EAAC,UAAU;YAAC,EAAE,EAAC;UAAU;YAAA;YAAA;YAAA;UAAA,QAAG;QAAA;UAAA;UAAA;UAAA;QAAA,QACnC,eACN;UAAQ,OAAO,EAAEJ,YAAa;UAAA,UAAC;QAAK;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA;IACxC;MAAA;MAAA;MAAA;IAAA;EACC;IAAA;IAAA;IAAA;EAAA,QACL;AAEX,CAAC;AAAC,GAjCIX,IAAI;EAAA,QAQJD,QAAQ,EAEKF,WAAW;AAAA;AAAA,KAVxBG,IAAI;AAmCV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}